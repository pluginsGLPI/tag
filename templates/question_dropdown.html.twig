{#
 # -------------------------------------------------------------------------
 # Tag plugin for GLPI
 # -------------------------------------------------------------------------
 #
 # LICENSE
 #
 # This file is part of Tag.
 #
 # Tag is free software; you can redistribute it and/or modify
 # it under the terms of the GNU General Public License as published by
 # the Free Software Foundation; either version 2 of the License, or
 # (at your option) any later version.
 #
 # Tag is distributed in the hope that it will be useful,
 # but WITHOUT ANY WARRANTY; without even the implied warranty of
 # MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 # GNU General Public License for more details.
 #
 # You should have received a copy of the GNU General Public License
 # along with Tag. If not, see <http://www.gnu.org/licenses/>.
 # -------------------------------------------------------------------------
 # @copyright Copyright (C) 2014-2023 by Teclib'.
 # @copyright Copyright (C) 2025 by the tag plugin team.
 # @license   GPLv2 https://www.gnu.org/licenses/gpl-2.0.html
 # @license   MIT https://opensource.org/licenses/mit-license.php
 # @link      https://github.com/pluginsGLPI/tag
 # -------------------------------------------------------------------------
 #}

{% if rand is not defined %}
    {% set rand = random() %}
{% endif %}

{% include "@tag/dropdown.html.twig" with {
    'input_name'         : input_name,
    'selected_tags'      : selected_tags,
    'available_tags'     : available_tags,
    'tags_color'         : tags_color,
    'rand'               : rand,
    'show_search_tooltip': show_search_tooltip|default(true),
    'dropdown_params'    : dropdown_params
} %}

<script>
    $(document).on('glpi-form-editor-question-type-changed', (event, question, type) => {
        if (type === 'PluginTagQuestionType') {
            const tagsColor = {{ tags_color|json_encode|raw }};

            function isDark(hexColor) {
                if (!hexColor) return false;
                hexColor = hexColor.replace('#', '');
                const r = parseInt(hexColor.substr(0,2),16);
                const g = parseInt(hexColor.substr(2,2),16);
                const b = parseInt(hexColor.substr(4,2),16);
                const luminance = (0.299*r + 0.587*g + 0.114*b)/255;
                return luminance < 0.5;
            }

            function applyTagColors($select) {
                const selectedIds = $select.find('option:selected').map(function() {
                    return $(this).val();
                }).get();

                const $container = $select.nextAll('.select2').find('.select2-selection__rendered');
                $container.find('.select2-selection__choice').each(function(index) {
                    const id = selectedIds[index];
                    const color = tagsColor[id];
                    if (color) {
                        $(this).css('background-color', color);
                        $(this).css('color', isDark(color) ? '#eeeeee' : '');

                        // Also style the remove button for better visibility
                        $(this).find('.select2-selection__choice__remove').css('color', isDark(color) ? '#eeeeee' : '');
                    }
                });
            }

            const $select = question.find('select[data-glpi-plugin-tag-dropdown-uuid="{{ rand }}"]');

            $select.each(function() {
                applyTagColors($(this));
            });

            $select.on('change select2:select select2:unselect', function() {
                applyTagColors($(this));
            });

            $select.on('select2:open', function() {
                setTimeout(() => {
                    $('.select2-results__option').each(function() {
                        const matches = this.id.match(/result-[^-]+-(\d+)$/);
                        if (matches && matches[1]) {
                            const color = tagsColor[matches[1]];
                            // Cible uniquement le span SANS la classe select2-rendered__match
                            $(this).find('span:not(.select2-rendered__match)').css({
                                'background-color': color ? color : '',
                                'padding': color ? '2px' : '',
                                'color': (color && isDark(color)) ? '#fff' : '',
                                'border-radius': '2px'
                            });
                        }
                    });
                }, 0);
            });
        }
    });
</script>
